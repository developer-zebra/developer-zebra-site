<Type Name="ScannerConfig+ReaderParameters+ReaderSpecifics+ContinuousRead" FullName="Symbol.XamarinEMDK.Barcode.ScannerConfig+ReaderParameters+ReaderSpecifics+ContinuousRead">
  <TypeSignature Language="C#" Value="public class ScannerConfig.ReaderParameters.ReaderSpecifics.ContinuousRead : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ScannerConfig/ReaderParameters/ReaderSpecifics/ContinuousRead extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Symbol.XamarinEMDK</AssemblyName>
    <AssemblyVersion>1.0.3.0</AssemblyVersion>
    <AssemblyVersion>1.0.3.1</AssemblyVersion>
    <AssemblyVersion>1.0.3.2</AssemblyVersion>
    <AssemblyVersion>2.0.0.1</AssemblyVersion>
    <AssemblyVersion>2.1.0.4</AssemblyVersion>
    <AssemblyVersion>2.1.0.5</AssemblyVersion>
    <AssemblyVersion>2.4.0.87</AssemblyVersion>
    <AssemblyVersion>2.5.0.41</AssemblyVersion>
    <AssemblyVersion>2.5.0.48</AssemblyVersion>
    <AssemblyVersion>2.6.0.69</AssemblyVersion>
    <AssemblyVersion>2.7.0.76</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("com/symbol/emdk/barcode/ScannerConfig$ReaderParams$ReaderSpecific$ContinuousRead", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("This class is obsoleted in this android platform")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ContinuousRead class provides access to continuous scanning related parameters.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContinuousRead (Symbol.XamarinEMDK.Barcode.ScannerConfig.ReaderParameters.ReaderSpecifics __self);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Symbol.XamarinEMDK.Barcode.ScannerConfig/ReaderParameters/ReaderSpecifics __self) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Lcom/symbol/emdk/barcode/ScannerConfig$ReaderParams$ReaderSpecific;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="__self" Type="Symbol.XamarinEMDK.Barcode.ScannerConfig+ReaderParameters+ReaderSpecifics" />
      </Parameters>
      <Docs>
        <param name="__self">
        </param>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContinuousRead (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">
        </param>
        <param name="transfer">
        </param>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DifferentSymbolTimeout">
      <MemberSignature Language="C#" Value="public int DifferentSymbolTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DifferentSymbolTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("differentSymbolTimeout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This setting is used to prevent the scanner from decoding another symbol within this time interval (applicable only when isContinuousScan = true). The user may want to prevent decoding too quickly and set an interval that the user can aim before decoding the next barcode. A value of 0 means no interval is required between two successive reads. Boundary values are 0 to 5000 in milliseconds in 500 increments such as 0, 500, 1000' etc</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContinuousScan">
      <MemberSignature Language="C#" Value="public bool IsContinuousScan { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContinuousScan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isContinuousScan")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Scan continuously; In this mode once the trigger is pulled the user can continue scanning barcodes without releasing the trigger as long as new reads are submitted as soon as the earlier read is satisfied. This mode is useful when the user wants to perform rapid scanning. To provide better control over this feature we have added the two new reader parameters (SameSymbolTimeout, DifferentSymbolTimeout) that are associated with continuous reads. These reader parameters are available in both ImagerSpecific and LaserSpecific classes. NOTE: The following must be considered when using this AIM_TYPE_CONTINUOUS_READ mode. 1. After each successful read, the application will have to submit a new read for rapid triggering. 2. It is recommended that the Picklist mode be enabled for the imager-class scanners. 3. When using this mode, the IMAGER_SPECIFIC.VFFeedback parameter will be ignored and no viewfinder feedback will be provided. It is similar to setting IMAGER_SPECIFIC.VFFeedback to VIEWFINDER_FEEDBACK.VIEWFINDER_MODE_DISABLED 4. If the IMAGER_SPECIFIC.VFMode parameter is set to VIEWFINDER_MODE.VIEWFINDER_MODE_DYNAMIC_RETICLE, then this continuous read mode will be ignored</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SameSymbolTimeout">
      <MemberSignature Language="C#" Value="public int SameSymbolTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SameSymbolTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sameSymbolTimeout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This setting is used to prevent the scanner driver from decoding the same symbol within this time interval (applicable only when isContinuousScan = true). Basically in the continuous mode the user can perform rapid scan and to prevent the user from decoding the same barcode twice user can set this value to an appropriate interval (in milliseconds). A value of 0 means no interval is required between two successive reads. Boundary values are 0 to 5000 in milliseconds in 500 increments such as 0, 500, 1000' etc</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
