<Type Name="ScannerConfig+ReaderParameters+ReaderSpecifics+LaserSpecifics" FullName="Symbol.XamarinEMDK.Barcode.ScannerConfig+ReaderParameters+ReaderSpecifics+LaserSpecifics">
  <TypeSignature Language="C#" Value="public class ScannerConfig.ReaderParameters.ReaderSpecifics.LaserSpecifics : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ScannerConfig/ReaderParameters/ReaderSpecifics/LaserSpecifics extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Symbol.XamarinEMDK</AssemblyName>
    <AssemblyVersion>1.0.3.0</AssemblyVersion>
    <AssemblyVersion>1.0.3.1</AssemblyVersion>
    <AssemblyVersion>1.0.3.2</AssemblyVersion>
    <AssemblyVersion>2.0.0.1</AssemblyVersion>
    <AssemblyVersion>2.1.0.4</AssemblyVersion>
    <AssemblyVersion>2.1.0.5</AssemblyVersion>
    <AssemblyVersion>2.4.0.87</AssemblyVersion>
    <AssemblyVersion>2.5.0.41</AssemblyVersion>
    <AssemblyVersion>2.5.0.48</AssemblyVersion>
    <AssemblyVersion>2.6.0.69</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("com/symbol/emdk/barcode/ScannerConfig$ReaderParams$ReaderSpecific$LaserSpecific", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>LaserSpecific class provides access to the laser scanner specific parameters.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LaserSpecifics (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">
        </param>
        <param name="transfer">
        </param>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdaptiveScanning">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.Barcode.ScannerConfig.AdaptiveScanning AdaptiveScanning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.Barcode.ScannerConfig/AdaptiveScanning AdaptiveScanning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("adaptiveScanning")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.Barcode.ScannerConfig+AdaptiveScanning</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This parameter enables or disables the adaptive scanning. When adaptive scanning is enabled, the scan engine will automatically toggle between 2 scan angles, wide and narrow, allowing the scan engine to decode barcodes based on the distance. Use enum ScannerConfig.AdaptiveScanning.
</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AimTimer">
      <MemberSignature Language="C#" Value="public int AimTimer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AimTimer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("aimTimer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Duration in milliseconds for timed aim types ScannerConfig.AimType.TIMED_HOLD and ScannerConfig.AimType.TIMED_RELEASE. Note than this duration must be less than the beamTimer.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AimType">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.Barcode.ScannerConfig.AimType AimType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.Barcode.ScannerConfig/AimType AimType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("aimType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.Barcode.ScannerConfig+AimType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Describes the type of aiming to use.
Note: Setting aimType is recommended instead of ScannerConfig.ReaderParams.ReaderSpecific.ContinuousRead.isContinuousScan. If the application modifies ScannerConfig.ReaderParams.ReaderSpecific.ContinuousRead.isContinuousScan and aimType, the aimType settings will take precedence.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeamTimer">
      <MemberSignature Language="C#" Value="public int BeamTimer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BeamTimer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("beamTimer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the maximum amount of time that the reader remains on (0 - 60,000 ms in increments of 100 ms). A value of 0 sets the reader to stay on indefinitely.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeamWidth">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.Barcode.ScannerConfig.BeamWidth BeamWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.Barcode.ScannerConfig/BeamWidth BeamWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("beamWidth")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.Barcode.ScannerConfig+BeamWidth</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controls the beam width of a laser scanner. Laser beam width can be shortened or widened using this parameter. Use enum ScannerConfig.BeamWidth.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinuousRead">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.Barcode.ScannerConfig.ReaderParameters.ReaderSpecifics.ContinuousRead ContinuousRead { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.Barcode.ScannerConfig/ReaderParameters/ReaderSpecifics/ContinuousRead ContinuousRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("continuousRead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.Barcode.ScannerConfig+ReaderParameters+ReaderSpecifics+ContinuousRead</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ContinuousRead class provides access to continuous scanning related parameters.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DifferentSymbolTimeout">
      <MemberSignature Language="C#" Value="public int DifferentSymbolTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DifferentSymbolTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("differentSymbolTimeout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This setting is used to prevent the scanner from decoding another symbol within this time interval. This is applicable only for the aim type ScannerConfig.AimType.CONTINUOUS_READ. The user may want to prevent decoding too quickly and set an interval that the user can aim before decoding the next barcode. A value of 0 means no interval is required between two successive reads. Boundary values are 0 to 5000 in milliseconds in 500 increments such as 0, 500, 1000... etc
Note: If the application modifies ScannerConfig.ReaderParams.ReaderSpecific.ContinuousRead.differentSymbolTimeout and differentSymbolTimeout, the differentSymbolTimeout settings will take precedence.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inverse1DMode">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.Barcode.ScannerConfig.Inverse1DMode Inverse1DMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.Barcode.ScannerConfig/Inverse1DMode Inverse1DMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inverse1DMode")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.Barcode.ScannerConfig+Inverse1DMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This parameter allows the user to select decoding on inverse 1D bar codes. Use enum ScannerConfig.Inverse1DMode.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinearSecurityLevel">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.Barcode.ScannerConfig.LinearSecurityLevel LinearSecurityLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.Barcode.ScannerConfig/LinearSecurityLevel LinearSecurityLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("linearSecurityLevel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.Barcode.ScannerConfig+LinearSecurityLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the number of times a bar code is read to confirm an accurate decode. Use enum ScannerConfig.LinearSecurityLevel.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OneDQuietZoneLevel">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.Barcode.ScannerConfig.OneDQuietZoneLevel OneDQuietZoneLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.Barcode.ScannerConfig/OneDQuietZoneLevel OneDQuietZoneLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("oneDQuietZoneLevel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.Barcode.ScannerConfig+OneDQuietZoneLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This parameter sets the effort at which the decoder will attempt to decode margin-less barcodes. Behavior of the level set to this parameter will vary based on the margin-less decoder selected. Note: Higher margin-less levels will increase decoding times and the risk of decoding errors. Zebra therefore recommends enabling only the symbologies that require a higher margin-less level, and leaving all other symbologies at the default level of 1. Use enum ScannerConfig.OneDQuietZoneLevel.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PoorQualityDecodeEffortLevel">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.Barcode.ScannerConfig.PoorQualityDecodeEffortLevel PoorQualityDecodeEffortLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.Barcode.ScannerConfig/PoorQualityDecodeEffortLevel PoorQualityDecodeEffortLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("poorQualityDecodeEffortLevel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.Barcode.ScannerConfig+PoorQualityDecodeEffortLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This parameter permits selection of enhancement modes for decoding barcodes of poor or degraded quality. Use enum ScannerConfig.PoorQualityDecodeEffortLevel.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerMode">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.Barcode.ScannerConfig.PowerMode PowerMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.Barcode.ScannerConfig/PowerMode PowerMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("powerMode")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.Barcode.ScannerConfig+PowerMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Set scanner power mode. Use enum ScannerConfig.PowerMode.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SameSymbolTimeout">
      <MemberSignature Language="C#" Value="public int SameSymbolTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SameSymbolTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sameSymbolTimeout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This setting is used to prevent the scanner driver from decoding the same symbol within this time interval. This is applicable only for the aim type ScannerConfig.AimType.CONTINUOUS_READ. Basically in the continuous mode the user can perform rapid scan and to prevent the user from decoding the same barcode twice user can set this value to an appropriate interval (in milliseconds). A value of 0 means no interval is required between two successive reads. Boundary values are 0 to 5000 in milliseconds in 500 increments such as 0, 500, 1000... etc
Note: If the application modifies ScannerConfig.ReaderParams.ReaderSpecific.ContinuousRead.sameSymbolTimeout and sameSymbolTimeout, the sameSymbolTimeout settings will take precedence.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
        <AssemblyVersion>1.0.3.1</AssemblyVersion>
        <AssemblyVersion>1.0.3.2</AssemblyVersion>
        <AssemblyVersion>2.0.0.1</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
