<Type Name="ScanAndPairManager" FullName="Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager">
  <TypeSignature Language="C#" Value="public class ScanAndPairManager : Symbol.XamarinEMDK.EMDKBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ScanAndPairManager extends Symbol.XamarinEMDK.EMDKBase" />
  <AssemblyInfo>
    <AssemblyName>Symbol.XamarinEMDK</AssemblyName>
    <AssemblyVersion>1.0.2.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.4</AssemblyVersion>
    <AssemblyVersion>2.1.0.5</AssemblyVersion>
    <AssemblyVersion>2.4.0.87</AssemblyVersion>
    <AssemblyVersion>2.5.0.41</AssemblyVersion>
    <AssemblyVersion>2.5.0.48</AssemblyVersion>
    <AssemblyVersion>2.6.0.69</AssemblyVersion>
    <AssemblyVersion>2.7.0.76</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Symbol.XamarinEMDK.EMDKBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("com/symbol/emdk/scanandpair/ScanAndPairManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The ScanAndPair provides simple methods to scan a Bluetooth barcode (name or address) of a remote Bluetooth device and pair/unpair with the remote Bluetooth device.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ScanAndPairManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">
        </param>
        <param name="transfer">
        </param>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStatusListener">
      <MemberSignature Language="C#" Value="public virtual void AddStatusListener (Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager.IStatusListener p0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStatusListener(class Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager/IStatusListener p0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addStatusListener", "(Lcom/symbol/emdk/scanandpair/ScanAndPairManager$StatusListener;)V", "GetAddStatusListener_Lcom_symbol_emdk_scanandpair_ScanAndPairManager_StatusListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager+IStatusListener" />
      </Parameters>
      <Docs>
        <param name="p0">
        </param>
        <summary>The client can register to get status notification via callbacks.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Config">
      <MemberSignature Language="C#" Value="public Symbol.XamarinEMDK.ScanAndPair.ScanAndPairConfig Config { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.ScanAndPair.ScanAndPairConfig Config" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("config")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.ScanAndPair.ScanAndPairConfig</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ScanAndPairManager.config provides a way to configure the settings to use it in scanAndPair() or scanAnUnpair() methods. These settings must be done before calling the scanAndPair() or scanAnUnpair() methods and do not modify the this while the method is processing its job.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPreviousCommandPending">
      <MemberSignature Language="C#" Value="public virtual bool IsPreviousCommandPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPreviousCommandPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isPreviousCommandPending", "()Z", "GetIsPreviousCommandPendingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This method provides information if any of the previous request is pending. If this method returns true, the client application must wait for the current complete before calling the issuing the next request.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveStatusListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveStatusListener (Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager.IStatusListener p0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveStatusListener(class Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager/IStatusListener p0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeStatusListener", "(Lcom/symbol/emdk/scanandpair/ScanAndPairManager$StatusListener;)V", "GetRemoveStatusListener_Lcom_symbol_emdk_scanandpair_ScanAndPairManager_StatusListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager+IStatusListener" />
      </Parameters>
      <Docs>
        <param name="p0">
        </param>
        <summary>The client can un-register to get status notification via callbacks.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScanAndPair">
      <MemberSignature Language="C#" Value="public virtual Symbol.XamarinEMDK.ScanAndPair.ScanAndPairResults ScanAndPair (string p0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Symbol.XamarinEMDK.ScanAndPair.ScanAndPairResults ScanAndPair(string p0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scanAndPair", "(Ljava/lang/String;)Lcom/symbol/emdk/scanandpair/ScanAndPairResults;", "GetScanAndPair_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.ScanAndPair.ScanAndPairResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="p0">Pin required to pair with the Bluetooth device.</param>
        <summary>This is an asynchronous method. The status of the scanAndPair() method will be returned if the callback is registered. If the always scan is enabled in the configuration, this method scans a barcode to get the Bluetooth address or name of a remote device, and pairs with that remote device. If a Bluetooth address is scanned, the remote device is paired without performing a discovery. If a Bluetooth name is scanned, then a discovery is done to find the address of the device and then the pairing is done. The provided authentication PIN is used for pairing. The maximum allowed length for the authentication PIN is 15 characters.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScanAndUnpair">
      <MemberSignature Language="C#" Value="public virtual Symbol.XamarinEMDK.ScanAndPair.ScanAndPairResults ScanAndUnpair ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Symbol.XamarinEMDK.ScanAndPair.ScanAndPairResults ScanAndUnpair() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scanAndUnpair", "()Lcom/symbol/emdk/scanandpair/ScanAndPairResults;", "GetScanAndUnpairHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.ScanAndPair.ScanAndPairResults</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is an asynchronous method. The status of the scanAndUnpair() method will be returned if the callback is registered. If the always scan is enabled in the configuration, this method scans a barcode to get the Bluetooth address or name of a remote device, and pairs with that remote device. 
If a Bluetooth address was scanned for pairing during scanAndPair calls, then the same address can be scanned for unpairing during the ScanAndUnPair call.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public virtual Symbol.XamarinEMDK.ScanAndPair.StatusData Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Symbol.XamarinEMDK.ScanAndPair.StatusData Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStatus", "()Lcom/symbol/emdk/scanandpair/StatusData;", "GetGetStatusHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Symbol.XamarinEMDK.ScanAndPair.StatusData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This method provides an option to get the current or recent status of scanAndPair or scanAndUnpair calls</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager.StatusEventArgs&gt; StatusEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager/StatusEventArgs&gt; StatusEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Symbol.XamarinEMDK.ScanAndPair.ScanAndPairManager+StatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.4</AssemblyVersion>
        <AssemblyVersion>2.1.0.5</AssemblyVersion>
        <AssemblyVersion>2.4.0.87</AssemblyVersion>
        <AssemblyVersion>2.5.0.41</AssemblyVersion>
        <AssemblyVersion>2.5.0.48</AssemblyVersion>
        <AssemblyVersion>2.6.0.69</AssemblyVersion>
        <AssemblyVersion>2.7.0.76</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
