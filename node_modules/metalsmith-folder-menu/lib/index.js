
var basename = require('path').basename;
var dirname = require('path').dirname;
var extname = require('path').extname;
var _ = require('underscore')._;

/**
 * Expose `plugin`.
 */

module.exports = plugin;

/**
 */

function plugin(options){
  options = options || {};
  var keys = options.keys || [];
  var automenu = options.automenu || false;
  return function(files, metalsmith, done){
    setImmediate(done);
    // console.log('****** Pattern: %s',options.folder);
    // console.log(files[options.folder+'index.md'])
    var menu = [];
    
    //build menu
    if(automenu){
      //build menu from folder structure
      Object.keys(files).forEach(function(file){
        if (!markdown(file)) return;      //ignore anything but md files
        // console.log('********checking file: %s', file);
        var data = files[file];
        var dir = dirname(file);
        var file = files[file];
        if (!inpattern(file,options.folder)) return;      //ignore files not in parent
        // console.log('base: %s', file.path.base)
        // console.log('dir: %s', file.path.dir)
        // console.log('ext: %s', file.path.ext)
        // console.log('name: %s', file.path.name)
        // console.log('href: %s', file.path.href)
        var noPattern = file.path.dir.replace(options.folder,"").trim();
        var folders = noPattern.split('/')
        // console.log(folders);
        var numlevels = folders.length;

        var itemL1Key = options.folder+folders[0];
        var itemL1 = getfilemenu(itemL1Key,files);
        var addedL1 = menu.filter(function ( obj ) {
            return obj.dir === itemL1Key;
        })[0];
        if(!addedL1){
          itemL1.items = [];
          menu.push(itemL1);
        }
        if(numlevels>1){
          var itemL2Key = options.folder+folders[0]+"/"+folders[1]
          var itemL2 = getfilemenu(itemL2Key,files);

          for (var i = 0; i < menu.length; i++) {
            if(menu[i].dir ===itemL1Key){
              var addedL2 = menu[i].items.filter(function ( obj ) {
                  return obj.dir === itemL2Key;
              })[0];
              // console.log('---itemL2: %s',JSON.stringify(itemL2))
              if(!addedL2){
                menu[i].items.push(itemL2);
              }

            }
          };

        }      

        
        // console.log('noPattern [%s]: %s', numlevels, l2Dir);
        

      });
    }
    else{
      //get menu from folder/index.md YAML instead
      var menufile = options.folder+'index.md'
      if(files[menufile] && files[menufile].menu){
        for (var i = 0; i< files[menufile].menu.length; i++) {
          // console.log("MENU ITEM");
          // console.log(files[menufile].menu[i]);
          var title = files[menufile].menu[i].title || "";
          var url = files[menufile].menu[i].url || "";
          var items = files[menufile].menu[i].items || [];

          for (var x = 0; x < items.length; x++) {
            // console.log(items[x]);
            if(items[x].file){
              var filename = items[x].file +'/index.md'
              files[menufile].menu[i].items[x].title =files[filename].title;
              files[menufile].menu[i].items[x].url =files[filename].url;
              // console.log('menu is a file %s',filename);
              // console.log(files[filename].title);
              // console.log(files[filename].path.href);
            }

          };
        };
      }
  
    }
    var sortedMenu = _.sortBy( menu, 'title' );
    menu = sortedMenu;
    // console.log(menu);
    Object.keys(files).forEach(function(file){
      if (!markdown(file)) return;      //ignore anything but md files
      if (!inpattern(files[file],options.folder)) return;      //ignore files not in parent
      // console.log("****adding menu %s", files[file].path.dir);
      if(automenu && options.ascontent && !files[file].contentlist){
        // console.log("****adding menu %s", files[file].path.dir);
        files[file].contentlist = menu;

      }else{
        if(automenu && !files[file].automenu){
            files[file].automenu = {
              items: menu
            };

        }
        else{
          if(files[options.folder+'index.md'] && files[options.folder+'index.md'].menu && !files[file].menu){
            // console.log("****adding menu %s", files[file].path.dir);
            // console.log(files[options.folder+'index.md'].menu);
            files[file].menu = files[options.folder+'index.md'].menu
            files[file].menuroot = options.folder
          }
        }
        
      }

    });
    if(automenu && files[options.folder+'index.md']){
        if(options.ascontent){
          files[options.folder+'index.md'].contentlist = menu;
        }
        else
        {
          files[options.folder+'index.md'].automenu = {
            items: menu
          }

        }
    }

    // console.log("****** menu");
    // console.log(menu);
    // console.log(menu[0].items);

  };
}

/**
 * Check if a `file` is markdown.
 *
 * @param {String} file
 * @return {Boolean}
 */

function markdown(file){
  return /\.md|\.markdown/.test(extname(file));
}

/**
 * Check if a file matches the pattern
 * we only want to add menu to files in that Pattern
 */
function inpattern(file,pattern){
  // console.log("comparing %s - %s", file.path.dir,pattern)
  return file.path.dir.startsWith(pattern);

}

function getfilemenu(folder,files){

  var filename = folder + "/index.md";
  // console.log('filename: %',filename);
  //console.log('files: %',files[filename]);
  var title = "";
  if(!files[filename]){
    return {
    title : folder,
    url : folder,
    dir: folder

    }
  }

  if(!files[filename].title){
    console.log('Warning No Title: %s',files[filename].path.dir)
  }
  else{
      title = files[filename].title
  }
  var item = {
    title : title,
    url : files[filename].path.href,
    dir: files[filename].path.dir
  };

  // console.log('***item: %s, %s',item.title,item.url);
  return item;
}
